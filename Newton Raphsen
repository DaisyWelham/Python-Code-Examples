#Doing the Newton-Raphsen method with an explicitly coded derivative function
def f(x):
    return(x**2+x)
    
def f_derivative(x):
    return(2*x+1)

def newton_raphsen(f,f_derivative,N_iterations,x_start):
    x = x_start
    for n in range(N_iterations):
        x = x - f(x)/f_derivative(x)
    return(x)

#Doing the Newton-Raphsen method with an empirically approximated derivative

def f_derivative_approx(f,x):
    if x!=0:
        dx = x*10**-10
    else:
        dx=10**-10
    return((f(x+dx)-f(x))/dx)

def newton_raphsen_approx(f,N_iterations,x_start):
    x = x_start
    for n in range(N_iterations):
        x = x - f(x)/f_derivative_approx(f,x)
    return(x)
